{"ast":null,"code":"var _jsxFileName = \"/Users/sungapark/Documents/Project/lvl/lvl-ui/src/views/Tracks/index.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useCallback } from 'react';\nimport { useQueryClient } from 'react-query';\nimport { Box, Typography } from '@mui/material';\nimport { Search, StyledDataGrid } from '../../components';\nimport debounce from 'lodash.debounce';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Tracks() {\n  _s();\n\n  const queryClient = useQueryClient();\n  const queryName = 'userData';\n  const [search, setSearch] = useState('');\n\n  const refetch = () => queryClient.invalidateQueries(queryName);\n\n  const debouncedUserSearch = useCallback(debounce(refetch, 400), []);\n\n  const handleTrackSearch = event => {\n    setSearch(event.target.value);\n    debouncedUserSearch(event.target.value);\n  };\n\n  const {\n    isLoading,\n    data\n  } = useQuery([queryname, search], () => {\n    return fetch().then(data);\n  });\n  const columns = [{\n    field: 'id',\n    hide: true\n  }, {\n    field: 'title',\n    headerName: 'Title',\n    flex: 1\n  }, {\n    field: 'albumId',\n    hide: true\n  }, {\n    field: 'mediaTypeId',\n    hide: true\n  }, {\n    field: 'genreId',\n    hide: true\n  }, {\n    field: 'composer',\n    hide: true\n  }, {\n    field: 'duration',\n    headerName: 'Duration',\n    width: 200\n  }, {\n    field: 'size',\n    headerName: 'Size'\n  }, {\n    field: 'price',\n    hide: true\n  }];\n  return /*#__PURE__*/_jsxDEV(Box, {\n    display: \"flex\",\n    flexDirection: \"column\",\n    flexGrow: 1,\n    children: [/*#__PURE__*/_jsxDEV(Box, {\n      my: 2,\n      children: /*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h3\",\n        children: \"Tracks\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Box, {\n      my: 2,\n      sx: {\n        backgroundColor: 'white',\n        borderRadius: '4px'\n      },\n      children: /*#__PURE__*/_jsxDEV(Search, {\n        value: search || '',\n        onChange: handleTrackSearch\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Box, {\n      my: 2,\n      height: 500,\n      children: /*#__PURE__*/_jsxDEV(StyledDataGrid, {\n        columns: columns,\n        rows: data\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Tracks, \"BnQ8JsXi0IDXZwQq/XyI3CkefQE=\", true, function () {\n  return [useQueryClient];\n});\n\n_c = Tracks;\n\nvar _c;\n\n$RefreshReg$(_c, \"Tracks\");","map":{"version":3,"sources":["/Users/sungapark/Documents/Project/lvl/lvl-ui/src/views/Tracks/index.js"],"names":["React","useState","useCallback","useQueryClient","Box","Typography","Search","StyledDataGrid","debounce","Tracks","queryClient","queryName","search","setSearch","refetch","invalidateQueries","debouncedUserSearch","handleTrackSearch","event","target","value","isLoading","data","useQuery","queryname","fetch","then","columns","field","hide","headerName","flex","width","backgroundColor","borderRadius"],"mappings":"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","sourcesContent":["import React, { useState, useCallback } from 'react'\nimport { useQueryClient } from 'react-query'\n\nimport { Box, Typography } from '@mui/material'\nimport { Search, StyledDataGrid } from '../../components'\n\nimport debounce from 'lodash.debounce'\n\nexport default function Tracks () {\n  const queryClient = useQueryClient()\n  const queryName = 'userData'\n\n  const [search, setSearch] = useState('')\n\n  const refetch = () => queryClient.invalidateQueries(queryName)\n  const debouncedUserSearch = useCallback(debounce(refetch, 400), [])\n  const handleTrackSearch = (event) => {\n    setSearch(event.target.value)\n    debouncedUserSearch(event.target.value)\n  }\n\n  const { isLoading, data } = useQuery([queryname, search], () => {\n    return fetch()\n    .then(data)\n  })\n\n  const columns = [\n    { field: 'id', hide: true},\n    {\n      field: 'title',\n      headerName: 'Title',\n      flex: 1\n    },\n    { field: 'albumId', hide: true},\n    { field: 'mediaTypeId', hide: true},\n    { field: 'genreId', hide: true},\n    { field: 'composer', hide: true},\n    {\n      field: 'duration',\n      headerName: 'Duration',\n      width: 200\n    },\n    {\n      field: 'size',\n      headerName: 'Size'\n    },\n    { field: 'price', hide: true}\n  ]\n\n  return (\n    <Box display=\"flex\" flexDirection=\"column\" flexGrow={1}>\n      <Box my={2}>\n        <Typography variant=\"h3\">Tracks</Typography>\n      </Box>\n      <Box my={2} sx={{ backgroundColor: 'white', borderRadius: '4px' }}>\n        <Search\n          value={search || ''}\n          onChange={handleTrackSearch}\n        />\n      </Box>\n      <Box my={2} height={500}>\n        <StyledDataGrid\n          columns={columns}\n          rows={data}\n        />\n      </Box>\n    </Box>\n  )\n}"]},"metadata":{},"sourceType":"module"}